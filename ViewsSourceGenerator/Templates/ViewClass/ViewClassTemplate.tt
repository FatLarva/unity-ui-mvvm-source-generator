<#@ template language="C#" linePragmas="false" visibility="internal"#>

<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ViewsSourceGenerator.Tools" #>

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using UniRx;
using Tools;
using ViewModelGeneration;

<#if (HasNamespace) {#>
namespace <#= NamespaceName #>
{
<#}#>
    public partial class <#= ClassName #>
    {
		private <#= ViewModelClassName #> _model;
		private CompositeDisposable _oneInitDisposable;
        private ChangeCheckedValue<bool> _isInitiated;

		public void Init(<#= ViewModelClassName #> model)
		{
			if (!_isInitiated.TryFlip(true))
			{
				return;
			}

			_model = model;
			
			_oneInitDisposable?.Dispose();
			_oneInitDisposable = new CompositeDisposable();

<#	foreach (var subViewInfo in SubViewInfos) { #>
			<#=subViewInfo.ViewFieldName#>.Init(model.<#=subViewInfo.ViewModelFieldName#>);
<#  } #>

<#	foreach (var observableBindingInfo in ObservableBindingInfos) { #>
			model.<#=observableBindingInfo.ObservableName#><#=observableBindingInfo.DelayIfNeeded()#>
				.Subscribe(observedValue => <#=observableBindingInfo.GenerateAssignment("observedValue")#>)
				.AddTo(_oneInitDisposable);

<#  } #>
<#	foreach (var info in ButtonMethodCallInfo) { #>
			<#= info.ButtonFieldName #>.OnClickAsObservable().Subscribe(_ => model.<#= info.MethodToCall #>()).AddTo(_oneInitDisposable);
<# } #>
        
<#	foreach (var localizableFieldInfo in LocalizableFieldInfos) { #>
			model.<#=localizableFieldInfo.LocalizationKey.ToPascalCase()#>.AsObservable().Subscribe(text => <#=localizableFieldInfo.FieldName#>.text = text).AddTo(_oneInitDisposable);
<#  } #>
<#	foreach (var localizableFieldInfo in LocalizablePlaceholderFieldInfos) { #>
			model.<#=localizableFieldInfo.LocalizationKey.ToPascalCase()#>.AsObservable().Subscribe(text => <#=localizableFieldInfo.FieldName#>.placeholder.GetComponent<TMPro.TextMeshProUGUI>().text = text).AddTo(_oneInitDisposable);
<#  } #>
<#	foreach (var info in SubscribeOnObservableInfos) { #>
<#		if (info.HasObservableArgument) { #>
			model.<#=info.ObservableName#>.Subscribe(<#=info.MethodName#>).AddTo(_oneInitDisposable);
<#      } else {#>
			model.<#=info.ObservableName#>.Subscribe(_ => <#=info.MethodName#>()).AddTo(_oneInitDisposable);
<#      } #>
<#  } #>

			ManualInit(model);
		}
		
		public void Deinit()
		{
			if (!_isInitiated.TryFlip(false))
			{
				return;
			}
			
<#	foreach (var subViewInfo in SubViewInfos) { #>
			<#=subViewInfo.ViewFieldName#>.Deinit();
<#  } #>

			ManualDeinit();

			_oneInitDisposable?.Dispose();
			_oneInitDisposable = null;
			
			_model = null;
		}

		private void OnDestroy()
		{
			_oneInitDisposable?.Dispose();
			_oneInitDisposable = null;

			ManualOnDestroy();
		}

		partial void ManualInit(<#= ViewModelClassName #> model);

		partial void ManualDeinit();

		partial void ManualOnDestroy();
    }
<#if (HasNamespace) {#>
}
<#}#>
