<#@ template language="C#" linePragmas="false" visibility="internal"#>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ViewsSourceGenerator.Tools" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable

<#	foreach (var oneUsing in Usings) { #>
<#= oneUsing#>
<#  } #>

<#if (HasNamespace) {#>
namespace <#= NamespaceName #>
{
<#}#>
    public partial class <#= ClassName #>
    {
<#	foreach (var info in ButtonMethodCallInfo) { #>
<#		if (info.InactivePeriodMs > 0) { #>
		private float <#= info.LastClickFieldName #>;
<#      } #>
<# } #>

		private <#= ViewModelClassName #>? _model;
		private CompositeDisposable? _oneInitDisposable;
        private ChangeCheckedValue<bool> _isInitiated;

		public void Init(<#= ViewModelClassName #> model)
		{
			if (!_isInitiated.TryFlip(true))
			{
				return;
			}

			_model = model;
			
			_oneInitDisposable?.Dispose();
			_oneInitDisposable = new CompositeDisposable();

<#	foreach (var subViewInfo in SubViewInfos) { #>
<#		if (subViewInfo.UseSameViewModel) { #>
			<#=subViewInfo.ViewFieldName#>.Init(model);
<#      } else { #>
			<#=subViewInfo.ViewFieldName#>.Init(model.<#=subViewInfo.ViewModelFieldName#>);
<#      } #>

<#  } #>
<#	foreach (var observableBindingInfo in ObservableBindingInfos) { #>
<#		if (observableBindingInfo.CheckForNull) { #>
			if (<#=observableBindingInfo.FieldName#> != null)
			{
				model.<#=observableBindingInfo.ObservableName#><#=observableBindingInfo.DelayIfNeeded()#>
				.Subscribe(observedValue => { <#=observableBindingInfo.GenerateAssignment("observedValue")#>})
				.AddTo(_oneInitDisposable);
			}
<#      } else { #>
			model.<#=observableBindingInfo.ObservableName#><#=observableBindingInfo.DelayIfNeeded()#>
				.Subscribe(observedValue => { <#=observableBindingInfo.GenerateAssignment("observedValue")#>})
				.AddTo(_oneInitDisposable);
<#      } #>

<#  } #>
<#	foreach (var info in ButtonMethodCallInfo) { #>
<#		if (info.ShouldCheckForNull) { #>
			if (<#=info.ButtonFieldName#> != null)
			{
				<#= info.ButtonFieldName #>.OnClickAsObservable()
<#			if (info.InactivePeriodMs > 0) { #>
					.Where(_ => (Time.realtimeSinceStartup - <#= info.LastClickFieldName #>) * 1000 > <#= info.InactivePeriodMs #>)
					.Do(_ => <#= info.LastClickFieldName #> = Time.realtimeSinceStartup)
<#          } #>
					.Subscribe(_ => model.<#= info.MethodToCall #>())
					.AddTo(_oneInitDisposable);
			}
<#      } else { #>
			<#= info.ButtonFieldName #>.OnClickAsObservable()
<#			if (info.InactivePeriodMs > 0) { #>
				.Where(_ => (Time.realtimeSinceStartup - <#= info.LastClickFieldName #>) * 1000 > <#= info.InactivePeriodMs #>)
				.Do(_ => <#= info.LastClickFieldName #> = Time.realtimeSinceStartup)
<#          } #>
				.Subscribe(_ => model.<#= info.MethodToCall #>())
				.AddTo(_oneInitDisposable);
<#      } #>
			
<# } #>
        
<#	foreach (var localizableFieldInfo in LocalizationFieldInfos) { #>
<#		if (localizableFieldInfo.CheckForNull) { #>
			if (<#=localizableFieldInfo.ViewFieldName#> != null)
			{
				model.<#=localizableFieldInfo.LocalizationKey.ToPascalCase()#>
					.AsObservable()
					.Subscribe(text => <#=localizableFieldInfo.PathToLocalizableText#> = text)
					.AddTo(_oneInitDisposable);
			}
<#      } else { #>
			model.<#=localizableFieldInfo.LocalizationKey.ToPascalCase()#>
				.AsObservable()
				.Subscribe(text => <#=localizableFieldInfo.PathToLocalizableText#> = text)
				.AddTo(_oneInitDisposable);
<#      } #>

<#  } #>
<#	foreach (var info in SubscribeOnObservableInfos) { #>
<#		if (info.HasObservableArgument) { #>
			model.<#=info.ObservableName#>.Subscribe(<#=info.MethodName#>).AddTo(_oneInitDisposable);
<#      } else { #>
			model.<#=info.ObservableName#>.Subscribe(_ => <#=info.MethodName#>()).AddTo(_oneInitDisposable);
<#      } #>
<#  } #>

			ManualInit(model);
		}
		
		public void Deinit()
		{
			if (!_isInitiated.TryFlip(false))
			{
				return;
			}
			
<#	foreach (var subViewInfo in SubViewInfos) { #>
			<#=subViewInfo.ViewFieldName#>.Deinit();
<#  } #>

			ManualDeinit();

			_oneInitDisposable?.Dispose();
			_oneInitDisposable = null;
			
			_model = null;
		}

		private void OnDestroy()
		{
			_oneInitDisposable?.Dispose();
			_oneInitDisposable = null;

			ManualOnDestroy();
		}

		partial void ManualInit(<#= ViewModelClassName #> model);

		partial void ManualDeinit();

		partial void ManualOnDestroy();
    }
<#if (HasNamespace) {#>
}
<#}#>
