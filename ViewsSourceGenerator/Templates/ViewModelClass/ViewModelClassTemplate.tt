<#@ template language="C#" linePragmas="false" #>
<#@ template linePragmas="false" #>

<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ViewsSourceGenerator.Tools" #>

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
<#= NeedUniRx ? "using UniRx;" : "" #>
<#= LocalizationKeys.Length > 0 ? "using LocalizationInterface;" : "" #>

<#if (HasNamespace) {#>
namespace <#= NamespaceName #>
{
<#}#>
    public partial class <#= ClassName #>
    {
<#	foreach (var subscribeInfo in SubscribeOnObservableInfos) { #>
<#		if (subscribeInfo.ShouldCreateObservableInViewModel) { #>
		private readonly <#=subscribeInfo.GetReactiveCommandType()#> _<#=subscribeInfo.ObservableName.Decapitalize()#>Cmd = new();
<#		}#>
<#  } #>
<#	foreach (var localizationKey in LocalizationKeys) { #>
		public readonly ReactiveProperty<string> <#=localizationKey.ToPascalCase()#> = new();
<#  } #>
<#	foreach (var localizationKey in PlaceholderLocalizationKeys) { #>
		public readonly ReactiveProperty<string> <#=localizationKey.ToPascalCase()#> = new();
<#  } #>
<#	foreach (var subscribeInfo in SubscribeOnObservableInfos) { #>
<#		if (subscribeInfo.ShouldCreateObservableInViewModel) { #>
		public IObservable<<#=subscribeInfo.GetObservableArgumentType()#>> <#=subscribeInfo.ObservableName#> => _<#=subscribeInfo.ObservableName.Decapitalize()#>Cmd;
<#		}#>
<#  } #>
<#	foreach (var methodName in MethodsToCall) { #>

        public void <#= methodName #>()
        {
            On<#= methodName #>();
        }
		partial void On<#= methodName #>();
<#  } #>

<# if (NeedLocalization) { #>
		private void HandleLocalization(ILocalizationProvider localizationProvider, CompositeDisposable compositeDisposable)
		{
			Observable.FromEvent(
					handler => localizationProvider.LanguageChanged += handler,
					handler => localizationProvider.LanguageChanged -= handler)
				.Subscribe(_ => ApplyLocalization(localizationProvider))
				.AddTo(compositeDisposable);

			ApplyLocalization(localizationProvider);
		}

		private void ApplyLocalization(ILocalizationProvider localizationProvider)
		{
<#	foreach (var localizationKey in LocalizationKeys) { #>
			<#= localizationKey.ToPascalCase() #>.Value = localizationProvider.GetLocalizationForKey("<#= localizationKey #>");
<#  } #>
<#	foreach (var localizationKey in PlaceholderLocalizationKeys) { #>
			<#= localizationKey.ToPascalCase() #>.Value = localizationProvider.GetLocalizationForKey("<#= localizationKey #>");
<#  } #>
			
			ManualLocalization(localizationProvider);
		}

		partial void ManualLocalization(ILocalizationProvider localizationProvider);
<# } #>
    }
<#if (HasNamespace) {#>
}
<#}#>
