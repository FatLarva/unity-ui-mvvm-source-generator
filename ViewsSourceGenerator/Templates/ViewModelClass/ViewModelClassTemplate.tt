<#@ template language="C#" linePragmas="false" visibility="internal"#>

<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ViewsSourceGenerator.Tools" #>

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable

<#	foreach (var oneUsing in Usings) { #>
<#= oneUsing#>
<#  } #>

<# if (HasNamespace) { #>
namespace <#= NamespaceName #>
{
<# } #>
	[GeneratedViewModel]
    public partial class <#= ClassName #> : IDisposable
    {
<#	foreach (var subscribeInfo in CreationInfos) { #>
<#		if (subscribeInfo.HasPrivateCreations) { #>
		<#=subscribeInfo.GetAutoCreatedObserversPrivatePart()#>
<#		} #>
<#  } #>
<#	foreach (var methodCallInfo in ButtonMethodCallInfos) { #>
<#		if (methodCallInfo.HasPrivateCreations) { #>
		<#=methodCallInfo.GetAutoCreatedObserversPrivatePart()#>
<#		} #>
<#  } #>
<#	foreach (var localizableFieldInfo in LocalizationInfos) { #>
		public readonly ReactiveProperty<string> <#=localizableFieldInfo.LocalizationKey.ToPascalCase()#> = new();
<#  } #>
<#	foreach (var subscribeInfo in CreationInfos) { #>
<#		if (subscribeInfo.HasPublicCreations) { #>
		<#=subscribeInfo.GetAutoCreatedObserversPublicPart()#>
<#		} #>
<#  } #>
<#	foreach (var methodCallInfo in ButtonMethodCallInfos) { #>
<#		if (methodCallInfo.HasPublicCreations) { #>
		<#=methodCallInfo.GetAutoCreatedObserversPublicPart()#>
<#		} #>
<#  } #>
		
		private readonly CompositeDisposable _lifetimeDisposable = new();
<# if (ShouldImplementDisposeInterface) { #>
		
		public void Dispose()
		{
			HandleAutoDispose();
		}
<# } #>

		<#=GetHandleAutoBindingsDefinition()#>
		{
<# if (HasObservablesToDispose) { #>
			HandleAutoCreatedObservables(_lifetimeDisposable);
<# } #>
<# if (NeedLocalization) { #>
			HandleLocalization(localizationProvider, _lifetimeDisposable);
<# } #>
		}

		private void HandleAutoDispose()	
		{
			_lifetimeDisposable.Dispose();
		}
<#	foreach (var buttonMethodCallInfo in ButtonMethodCallInfos) { #>
	<# if (buttonMethodCallInfo.ShouldGenerateMethodWithPartialStuff) { #>

        public void <#= buttonMethodCallInfo.MethodToCall #>()
        {
            On<#= buttonMethodCallInfo.MethodToCall #>();
        }
		partial void On<#= buttonMethodCallInfo.MethodToCall #>();
	<# } else if (buttonMethodCallInfo.HasPassForwardCommands) { #>

        public void <#= buttonMethodCallInfo.MethodToCall #>()
        {
            <#= buttonMethodCallInfo.GetCallingCommandPart() #>
        }
	<# } #>

<#  } #>

<# if (HasObservablesToDispose) { #>
		private void HandleAutoCreatedObservables(CompositeDisposable compositeDisposable)
		{
<#	foreach (var subscribeInfo in CreationInfos) { #>
<#		if (subscribeInfo.HasPrivateCreations) { #>
			<#=subscribeInfo.GetAutoCreatedObserversDisposePart()#>
<#		} #>
<#  } #>
<#	foreach (var methodCallInfo in ButtonMethodCallInfos) { #>
<#		if (methodCallInfo.HasPrivateCreations) { #>
			<#=methodCallInfo.GetAutoCreatedObserversDisposePart()#>
<#		} #>
<#  } #>
<#	foreach (var localizableFieldInfo in LocalizationInfos) { #>
			<#=localizableFieldInfo.LocalizationKey.ToPascalCase()#>.AddTo(compositeDisposable);
<#  } #>
		}
<# } #>

<# if (NeedLocalization) { #>
		private void HandleLocalization(ILocalizationProvider localizationProvider, CompositeDisposable compositeDisposable)
		{
			Observable.FromEvent(
					handler => localizationProvider.LanguageChanged += handler,
					handler => localizationProvider.LanguageChanged -= handler)
				.Subscribe(_ => ApplyLocalization(localizationProvider))
				.AddTo(compositeDisposable);

			ApplyLocalization(localizationProvider);
		}

		private void ApplyLocalization(ILocalizationProvider localizationProvider)
		{
			try
			{
<#	foreach (var localizableFieldInfo in LocalizationInfos) { #>
<#		if (localizableFieldInfo.IsProviderObservable) { #>
				<#=localizableFieldInfo.KeyProviderFieldName#>
					.Subscribe(localizationKey => {
						<#= localizableFieldInfo.LocalizedTextField #>.Value = localizationProvider.GetLocalizationForKey(localizationKey);
					})
					.AddTo(_lifetimeDisposable);
				
<#		} else { #>
				<#= localizableFieldInfo.LocalizedTextField #>.Value = localizationProvider.GetLocalizationForKey(<#= localizableFieldInfo.GetLocalizationKey() #>);
<#		} #>
<#  } #>
			}
			catch(Exception exception)
			{
				Debug.LogError("Exception thrown during auto-localization.");
				Debug.LogException(exception);
			}
			
			try
			{
				ManualLocalization(localizationProvider);
			}
			catch(Exception exception)
			{
				Debug.LogError("Exception thrown during manual-localization.");
				Debug.LogException(exception);
			}
		}

		partial void ManualLocalization(ILocalizationProvider localizationProvider);
<# } #>
    }
<#if (HasNamespace) {#>
}
<#}#>
